/** Copyright (C) 2008 Volker SchÃ¶nefeld. See the copyright notice in the LICENSE file. */
package net.volcore.wtvmaster;

//imports
    // slf4j
        import org.slf4j.*;
    // java
        import java.net.*;
        import java.util.*;
    // volcore libs
        import net.volcore.util.*;
        import net.volcore.wtvmina.*;
    // Mina
        import org.apache.mina.transport.socket.nio.*;
        import org.apache.mina.filter.codec.*;
        import org.apache.mina.core.session.*;
    // wtvmaster
        import net.volcore.wtvmaster.user.*;
        import net.volcore.wtvmaster.game.*;
        import net.volcore.wtvmaster.relay.*;
        import net.volcore.wtvmaster.upload.*;
        import net.volcore.wtvmaster.http.*;
    // asyncweb
        import org.apache.asyncweb.common.*;
        import org.apache.asyncweb.common.codec.*;


public class WTVMaster implements Runnable, Stoppable
{
    static Logger   logger = LoggerFactory.getLogger( "WTVMaster" );

    public final static String appName = "WTVMaster";
    public final static byte   versionMajor = VersionInfo.major;
    public final static short  versionMinor = VersionInfo.minor;
    public final static byte   versionRelease = VersionInfo.release;
    public final static String title = "The new upload server for the classic protocol.";
    public final static String motd = "This is the new upload server, currently in testing. The dawn of a new age!";
    public final static String ircServer = "";
    public final static short  ircPort = 0;
    public final static String ircChannel = "";
    public final static String url = "http://www.waaaghtv.com/";

    /** Protected members */
        /** The config, generated by apache CLI */
            protected Config config;
        /** shutdown trigger. */
            protected boolean doShutdown = false;
        /** The relay server acceptor. */
            protected NioSocketAcceptor         relayAcceptor;
        /** The recorder server acceptor. */
            protected NioSocketAcceptor         recorderAcceptor;
        /** The web server acceptor. */
            protected NioSocketAcceptor         webAcceptor;
        /** Uptime counter. */
            protected long                      timeStarted = System.currentTimeMillis( );
        /** The user database connected to the backend database. */
            public UserDatabase                 userDB;
        /** The game database connected to the backend database. */
            public GameDatabase                 gameDB = new GameDatabase( );
        /** Last time the cache was pruned. */
            public long                         lastCacheTime = 0;

    /** Public member access. */
        public long getUptime( ) { return System.currentTimeMillis( ) - timeStarted; }
        public String getVersionString( ) { return versionMajor+"."+versionMinor+"."+versionRelease+"-"+VersionInfo.special.trim( ); }

        public long getRelayNumSessions( ) { return relayAcceptor.getManagedSessionCount( ); }
        public long getRelayTotalSessionCount( ) { return relayAcceptor.getStatistics( ).getCumulativeManagedSessionCount( ); }
        public long getRelayTotalBytesRead( ) { return relayAcceptor.getStatistics( ).getReadBytes( ); }
        public long getRelayTotalBytesWritten( ) { return relayAcceptor.getStatistics( ).getWrittenBytes( ); }
        public double getRelayBytesReadPerSecond( ) { return relayAcceptor.getStatistics( ).getReadBytesThroughput( ); }
        public double getRelayBytesWrittenPerSecond( ) { return relayAcceptor.getStatistics( ).getWrittenBytesThroughput( ); }
        public long getRelayPeakSessionCount( ) { return relayAcceptor.getStatistics( ).getLargestManagedSessionCount( ); }
        public double getRelayPeakBytesReadPerSecond( ) { return relayAcceptor.getStatistics( ).getLargestReadBytesThroughput( ); }
        public double getRelayPeakBytesWrittenPerSecond( ) { return relayAcceptor.getStatistics( ).getLargestWrittenBytesThroughput( ); }

        public long getRecorderNumSessions( ) { return recorderAcceptor.getManagedSessionCount( ); }
        public long getRecorderTotalSessionCount( ) { return recorderAcceptor.getStatistics( ).getCumulativeManagedSessionCount( ); }
        public long getRecorderTotalBytesRead( ) { return recorderAcceptor.getStatistics( ).getReadBytes( ); }
        public long getRecorderTotalBytesWritten( ) { return recorderAcceptor.getStatistics( ).getWrittenBytes( ); }
        public double getRecorderBytesReadPerSecond( ) { return recorderAcceptor.getStatistics( ).getReadBytesThroughput( ); }
        public double getRecorderBytesWrittenPerSecond( ) { return recorderAcceptor.getStatistics( ).getWrittenBytesThroughput( ); }
        public long getRecorderPeakSessionCount( ) { return recorderAcceptor.getStatistics( ).getLargestManagedSessionCount( ); }
        public double getRecorderPeakBytesReadPerSecond( ) { return recorderAcceptor.getStatistics( ).getLargestReadBytesThroughput( ); }
        public double getRecorderPeakBytesWrittenPerSecond( ) { return recorderAcceptor.getStatistics( ).getLargestWrittenBytesThroughput( ); }

        /** Getter for relayAcceptor */
        	public NioSocketAcceptor getRelayAcceptor( ) { return relayAcceptor; }
        /** Setter for relayAcceptor */
        	public void setRelayAcceptor( NioSocketAcceptor relayAcceptor ) { this.relayAcceptor = relayAcceptor; }
        /** Getter for recorderAcceptor */
        	public NioSocketAcceptor getRecorderAcceptor( ) { return recorderAcceptor; }
        /** Setter for recorderAcceptor */
        	public void setRecorderAcceptor( NioSocketAcceptor recorderAcceptor ) { this.recorderAcceptor = recorderAcceptor; }
        /** Getter for webAcceptor */
        	public NioSocketAcceptor getWebAcceptor( ) { return webAcceptor; }
        /** Setter for webAcceptor */
        	public void setWebAcceptor( NioSocketAcceptor webAcceptor ) { this.webAcceptor = webAcceptor; }

    /** Constructor */
        WTVMaster( Config config ) throws ConfigException
        {
            this.config = config;

            /** Sanitycheck the config. */
                if( config == null ) 
                    throw new ConfigException( "No config provided!" );

                if( config.recorderPort == 0 )
                    throw new ConfigException( "Please specify a valid recorder port!" );

                if( config.relayPort == 0 )
                    throw new ConfigException( "Please specify a valid relaying port!" );

                if( config.httpPort == 0 )
                    throw new ConfigException( "Please specify a valid http port!" );


        }

    /** Timer function. */
        public void timerFunction( )
        {
            long now = System.currentTimeMillis( );
            if( now - lastCacheTime > 5*60*1000 )
            {
                lastCacheTime = now;
                gameDB.pruneCache( );
            }
        }

    /** Main loop */
        public void run( )
        {
            try {
                /** Startup. */
                    logger.info( "Starting up..." );

                    /** Initialize the database connections. */
                        //userDB = new RemoteUserDatabase(
                                //"http://www.myserver.com/canupload",
                                //"http://www.myserver.com/affiliatecheck" );
                        userDB = new HibernateUserDatabase();
                        gameDB.fetchInitialList( );

                    /** Create the web acceptor */
                        logger.trace( "Creating web acceptor..." );
                        webAcceptor = new NioSocketAcceptor();
                        webAcceptor.getSessionConfig( ).setReuseAddress( true );
                        webAcceptor.setDefaultLocalAddress( new InetSocketAddress( config.httpPort ) );
                        webAcceptor.setHandler( new HttpIoHandler( this ) );
                        webAcceptor.getSessionConfig( ).setIdleTime( IdleStatus.READER_IDLE, 30 );
                        webAcceptor.getFilterChain( ).addLast( "httpCodec", new ProtocolCodecFilter( new HttpCodecFactory( ) ) );
                        webAcceptor.bind();

                    /** Create the recorder acceptor. */
                        logger.trace( "Creating recorder acceptor..." );
                        recorderAcceptor = new NioSocketAcceptor( );
                        recorderAcceptor.getSessionConfig( ).setReuseAddress( true );
                        recorderAcceptor.setDefaultLocalAddress( new InetSocketAddress( config.recorderPort ) );
                        recorderAcceptor.setHandler( new RecorderIoHandler( this ) );
                        recorderAcceptor.getSessionConfig( ).setIdleTime( IdleStatus.READER_IDLE, 30 );
                        recorderAcceptor.getFilterChain( ).addLast( "wtvCodec", new ProtocolCodecFilter( new WTVCodecFactory( ) ) );
                        recorderAcceptor.bind( );

                    /** Create the relay acceptor. */
                        logger.trace( "Creating relay acceptor..." );
                        relayAcceptor = new NioSocketAcceptor( );
                        relayAcceptor.getSessionConfig( ).setReuseAddress( true );
                        relayAcceptor.setDefaultLocalAddress( new InetSocketAddress( config.relayPort ) );
                        relayAcceptor.setHandler( new RelayIoHandler( this ) );
                        relayAcceptor.getSessionConfig( ).setIdleTime( IdleStatus.READER_IDLE, 60 );
                        relayAcceptor.getFilterChain( ).addLast( "wtvCodec", new ProtocolCodecFilter( new WTVCodecFactory( ) ) );
                        relayAcceptor.bind( );

                /** Main loop. */
                    logger.info( "Entering main loop..." );

                    int i = 0;
                    while( doShutdown == false )
                    {
                        Thread.sleep( 250 );
                        timerFunction( );
                    }

                /** Shutdown. */
                    logger.info( "Shutting down..." );

                    /** Shutdown acceptors. */
                        relayAcceptor.unbind( );
                        recorderAcceptor.unbind( );
                        webAcceptor.unbind( );

                        /** Close any remaining sessions. */
                        for( IoSession session : relayAcceptor.getManagedSessions( ).values( ) )
                            session.close( true );

                        for( IoSession session : recorderAcceptor.getManagedSessions( ).values( ) )
                            session.close( true );

                        for( IoSession session : webAcceptor.getManagedSessions( ).values( ) )
                            session.close( true );

            } catch( Exception e )
            {   
                logger.error( "Exception when running wtvmaster mainloop: "+e );
                e.printStackTrace( );
                doShutdown = true;
            }
        }

    /** Trigger shutdown */
        public void stop( )
        {
            doShutdown = true;
        }
}
